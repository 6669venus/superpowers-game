module Sup {
  export module ArcadePhysics2D {
    export enum BodyType { Box, TileMap };

    export class Body extends ActorComponent {
      constructor(actor: Sup.Actor, type: BodyType, options) {
        super(actor);

        this.__inner = new SupEngine.componentClasses.ArcadeBody2D(actor.__inner);
        if (type === Sup.ArcadePhysics2D.BodyType.Box) this.__inner.setupBox(options);
        else if (type === Sup.ArcadePhysics2D.BodyType.TileMap) {
          options.tileSetAsset = player.getOuterAsset(options.tileMapAsset.__inner.data.tileSetId);
          this.__inner.setupTileMap(options);
        }
        this.__inner.__outer = this;
        this.actor.arcadeBody2D = this;
      }
      destroy() {
        this.actor.arcadeBody2D = null;
        super.destroy();
      }

      setEnabled(enabled: boolean) { this.__inner.enabled = enabled; return this; }
      getEnabled() { return this.__inner.enabled; }

      setMovable(movable: boolean) {
        this.__inner.movable = movable;
        return this;
      }
      getMovable() { return this.__inner.movable; }

      setSize(width: number, height: number) {
        this.__inner.width = width;
        this.__inner.height = height;
        return this;
      }
      getSize() { return { width: this.__inner.width, height: this.__inner.height}; }

      setOffset(offset) {
        this.__inner.offsetX = offset.x;
        this.__inner.offsetY = offset.y;
        this.__inner.refreshActorPosition();
        return this;
      }
      getOffset() { return new Sup.Math.Vector2(this.__inner.offsetX, this.__inner.offsetY); }

      warpPosition(position: Sup.Math.Vector2|number, y?: number) {
        if (typeof position === "number") this.__inner.warpPosition(position, y);
        else this.__inner.warpPosition(position.x, position.y);
        return this;
      }

      setVelocity(velocity: Sup.Math.Vector2|number, y?: number) {
        if (typeof velocity === "number") {
          this.__inner.velocity.x = velocity;
          this.__inner.velocity.y = y;
        } else {
          this.__inner.velocity.x = velocity.x;
          this.__inner.velocity.y = velocity.y;
        }
        return this;
      }
      setVelocityX(x: number) {
        this.__inner.velocity.x = x;
        return this;
      }
      setVelocityY(y: number) {
        this.__inner.velocity.y = y;
        return this;
      }
      getVelocity() { return new Sup.Math.Vector2(this.__inner.velocity.x, this.__inner.velocity.y); }

      setVelocityMin(velocityMin: Sup.Math.Vector2|number, y?: number) {
        if (typeof velocityMin === "number") {
          this.__inner.velocityMin.x = velocityMin;
          this.__inner.velocityMin.y = y;
        } else {
          this.__inner.velocityMin.x = velocityMin.x;
          this.__inner.velocityMin.y = velocityMin.y;
        }
        return this;
      }
      getVelocityMin() { return new Sup.Math.Vector2(this.__inner.velocityMin.x, this.__inner.velocityMin.y); }

      setVelocityMax(velocityMax: Sup.Math.Vector2|number, y?: number) {
        if (typeof velocityMax === "number") {
          this.__inner.velocityMax.x = velocityMax;
          this.__inner.velocityMax.y = y;
        } else {
          this.__inner.velocityMax.x = velocityMax.x;
          this.__inner.velocityMax.y = velocityMax.y;
        }
        return this;
      }
      getVelocityMax() { return new Sup.Math.Vector2(this.__inner.velocityMax.x, this.__inner.velocityMax.y); }

      setVelocityMultiplier(velocityMultiplier: Sup.Math.Vector2|number, y?: number) {
        if (typeof velocityMultiplier === "number") {
          this.__inner.velocityMultiplier.x = velocityMultiplier;
          this.__inner.velocityMultiplier.y = y;
        } else {
          this.__inner.velocityMultiplier.x = velocityMultiplier.x;
          this.__inner.velocityMultiplier.y = velocityMultiplier.y;
        }
        return this;
      }
      getVelocityMultiplier() { return new Sup.Math.Vector2(this.__inner.velocityMultiplier.x, this.__inner.velocityMultiplier.y); }

      getTouches() {
        return {
          left: this.__inner.touches.left, right : this.__inner.touches.right,
          top : this.__inner.touches.top , bottom: this.__inner.touches.bottom
        };
      }
    }
  }
}
