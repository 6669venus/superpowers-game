module Sup {
  export module ArcadePhysics2D {
    export enum BodyType { Box, TileMap };

    export class Body extends ActorComponent {
      constructor(actor: Sup.Actor, type: BodyType, options) {
        super(actor);

        this.__inner = new SupEngine.componentClasses.ArcadeBody2D(actor.__inner);
        if (type === Sup.ArcadePhysics2D.BodyType.Box) this.__inner.setupBox(options);
        else if (type === Sup.ArcadePhysics2D.BodyType.TileMap) {
          options.tileSetAsset = player.getOuterAsset(options.tileMapAsset.__inner.data.tileSetId);
          this.__inner.setupTileMap(options);
        }
        this.__inner.__outer = this;
        this.actor.arcadeBody2D = this;
      }
      destroy() {
        this.actor.arcadeBody2D = null;
        super.destroy();
      }

      setEnabled(enabled: boolean) { this.__inner.enabled = enabled; return this; }
      getEnabled() { return this.__inner.enabled; }

      setMovable(movable: boolean) {
        this.__inner.movable = movable;
        return this;
      }
      getMovable() { return this.__inner.movable; }

      setSize(width: number, height: number) {
        this.__inner.width = width;
        this.__inner.height = height;
        return this;
      }
      getSize() { return { width: this.__inner.width, height: this.__inner.height}; }

      setOffset(offset) {
        this.__inner.offsetX = offset.x;
        this.__inner.offsetY = (SupEngine.ArcadePhysics2D.plane === "XY") ? offset.y : offset.z;
        this.__inner.refreshActorPosition();
        return this;
      }
      getOffset() {
        let offset: any = { x: this.__inner.offsetX };
        if (SupEngine.ArcadePhysics2D.plane === "XY") offset.y = this.__inner.offsetY;
        else offset.z = this.__inner.offsetY;
        return offset;
      }

      warpPosition(x: Sup.Math.Vector3|number, y?: number, z?: number) {
        if (y == null && z == null) this.__inner.warpPosition(<Sup.Math.Vector3>x);
        else this.__inner.warpPosition(new Sup.Math.Vector3(<number>x, y, z));
        return this;
      }

      setVelocity(x: Sup.Math.Vector3|number, yz?: number) {
        if (yz == null) {
          let velocity = <Sup.Math.Vector3>x;
          this.__inner.velocity.x = velocity.x;
          if (SupEngine.ArcadePhysics2D.plane === "XY") this.__inner.velocity.y = velocity.y;
          else this.__inner.velocity.z = velocity.z;
        } else {
          this.__inner.velocity.x = <number>x;
          if (SupEngine.ArcadePhysics2D.plane === "XY") this.__inner.velocity.y = yz;
          else this.__inner.velocity.z = yz;
        }
        return this;
      }
      setVelocityX(x: number) {
        this.__inner.velocity.x = x;
        return this;
      }
      setVelocityY(y: number) {
        if (SupEngine.ArcadePhysics2D.plane === "XZ") throw new Error("ArcadeBody2D.setVelocityY can't be used with 'XZ' plane");
        this.__inner.velocity.y = y;
        return this;
      }
      setVelocityZ(z: number) {
        if (SupEngine.ArcadePhysics2D.plane === "XY") throw new Error("ArcadeBody2D.setVelocityZ can't be used with 'XY' plane");
        this.__inner.velocity.z = z;
        return this;
      }
      getVelocity() { return new Sup.Math.Vector3(this.__inner.velocity.x, this.__inner.velocity.y, this.__inner.velocity.z) }

      setVelocityMin(x: Sup.Math.Vector3|number, yz?: number) {
        if (yz == null) {
          let velocityMin = <Sup.Math.Vector3>x;
          this.__inner.velocityMin.x = velocityMin.x;
          if (SupEngine.ArcadePhysics2D.plane === "XY") this.__inner.velocityMin.y = velocityMin.y;
          else this.__inner.velocityMin.z = velocityMin.z;
        } else {
          this.__inner.velocityMin.x = x;
          if (SupEngine.ArcadePhysics2D.plane === "XY") this.__inner.velocityMin.y = yz;
          else this.__inner.velocityMin.z = yz;
        }
        return this;
      }
      getVelocityMin() { return new Sup.Math.Vector3(this.__inner.velocityMin.x, this.__inner.velocityMin.y, this.__inner.velocityMin.z) }

      setVelocityMax(x: Sup.Math.Vector3|number, yz?: number) {
        if (yz == null) {
          let velocityMax = <Sup.Math.Vector3>x;
          this.__inner.velocityMax.x = velocityMax.x;
          if (SupEngine.ArcadePhysics2D.plane === "XY") this.__inner.velocityMax.y = velocityMax.y;
          else this.__inner.velocityMax.z = velocityMax.z;
        } else {
          this.__inner.velocityMax.x = x;
          if (SupEngine.ArcadePhysics2D.plane === "XY") this.__inner.velocityMax.y = yz;
          else this.__inner.velocityMax.z = yz;
        }
        return this;
      }
      getVelocityMax() { return new Sup.Math.Vector3(this.__inner.velocityMax.x, this.__inner.velocityMax.y, this.__inner.velocityMax.z) }

      setVelocityMultiplier(x: Sup.Math.Vector3|number, yz?: number) {
        if (yz == null) {
          let velocityMultiplier = <Sup.Math.Vector3>x;
          this.__inner.velocityMultiplier.x = velocityMultiplier.x;
          if (SupEngine.ArcadePhysics2D.plane === "XY") this.__inner.velocityMultiplier.y = velocityMultiplier.y;
          else this.__inner.velocityMultiplier.z = velocityMultiplier.z;
        } else {
          this.__inner.velocityMultiplier.x = x;
          if (SupEngine.ArcadePhysics2D.plane === "XY") this.__inner.velocityMultiplier.y = yz;
          else this.__inner.velocityMultiplier.z = yz;
        }
        return this;
      }
      getVelocityMultiplier() { return new Sup.Math.Vector3(this.__inner.velocityMultiplier.x, this.__inner.velocityMultiplier.y, this.__inner.velocityMultiplier.z) }

      getTouches() {
        return {
          left: this.__inner.touches.left, right : this.__inner.touches.right,
          top : this.__inner.touches.top , bottom: this.__inner.touches.bottom,
          back: this.__inner.touches.top , front : this.__inner.touches.bottom,
        };
      }
    }
  }
}
