module Sup {

  var tmpVector3 = new SupEngine.THREE.Vector3();
  var tmpQuaternion = new SupEngine.THREE.Quaternion();

  export class Scene extends Asset {}

  export function loadScene(scenePathOrAsset) {
    player.gameInstance.destroyAllActors();
    appendScene(scenePathOrAsset);
  }

  export function appendScene(scenePathOrAsset, sceneParentActor=null, setupActors=true): any {
    var sceneAsset: Scene;

    if (typeof scenePathOrAsset === 'string') {
      var entry = player.entriesByPath[scenePathOrAsset];
      if (entry == null) throw new Error(`Invalid asset path: ${scenePathOrAsset}`);

      var outerAsset = player.getOuterAsset(entry.id);
      if (outerAsset.type != 'scene') throw new Error(`Invalid asset type: got ${outerAsset.type}, expected scene`);
      sceneAsset = <Scene>outerAsset;
    } else {
      sceneAsset = <Scene>scenePathOrAsset;
    }

    let actors: Actor[] = [];
    let allComponents = [];

    let walk = (node, parentActor) => {
      let actor: Actor;
      if (node.prefabId != null) {
        let prefabAsset = player.getOuterAsset(node.prefabId);
        if (prefabAsset != null) {
          let result: any = appendScene(prefabAsset, parentActor, false);
          actor = result.actors[0];
          actor.__inner.name = node.name;
          actor.__inner.threeObject.visible = node.visible;

          let localPosition = actor.__inner.getLocalPosition();
          actor.__inner.setLocalPosition(tmpVector3.set(node.position.x, node.position.y, node.position.z).add(localPosition));

          let localOrientation = actor.__inner.getLocalOrientation();
          tmpQuaternion.set(node.orientation.x, node.orientation.y, node.orientation.z, node.orientation.w);
          actor.__inner.setLocalOrientation(tmpQuaternion.multiply(localOrientation));

          let localScale = actor.__inner.getLocalScale();
          actor.__inner.setLocalScale(tmpVector3.set(node.scale.x, node.scale.y, node.scale.z).multiply(localScale));

          allComponents = allComponents.concat(result.allComponents);

        } else throw new Error(`Undefined prefab in ${sceneAsset.name}`);

      } else {
        actor = player.createActor(node.name, parentActor, { visible: node.visible, layer: node.layer });

        actor.__inner.setLocalPosition( tmpVector3.set(node.position.x, node.position.y, node.position.z) )
        actor.__inner.setLocalOrientation( tmpQuaternion.set(node.orientation.x, node.orientation.y, node.orientation.z, node.orientation.w) )
        actor.__inner.setLocalScale( tmpVector3.set(node.scale.x, node.scale.y, node.scale.z) )

        node.components.forEach( (sceneComponent) => {
          allComponents.push({
            sceneComponent: sceneComponent,
            actorComponent: player.createComponent(sceneComponent.type, actor, sceneComponent.config)
          });
        });

        actor.__inner.awoken = false;
        node.children.forEach( (child) => { walk(child, actor); } );
      }

      return actor;
    }
    sceneAsset.__inner.nodes.forEach( (node) => { actors.push( walk(node, sceneParentActor) ); } );

    if (!setupActors) return { actors, allComponents };

    allComponents.forEach((x) => {
      SupRuntime.plugins[x.sceneComponent.type].setupComponent(player, x.actorComponent.__inner, x.sceneComponent.config);
    });

    let awakeActor = (actor) => {
      if (actor.__inner.awoken) return;

      actor.__inner.awoken = true;
      actor.__inner.awake();
      actor.getChildren().forEach( (child) => { awakeActor(child); } )
    }
    actors.forEach( (actor) => { awakeActor(actor); });
    return actors;
  }
}
